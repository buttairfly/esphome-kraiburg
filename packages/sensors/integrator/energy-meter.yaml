substitutions:
  sensor_id: ${id}_energy
  sensor_ticks_id: ${sensor_id}_ticks
  sensor_energy_id: ${sensor_id}_total
  global_ticks_id: global_${sensor_id}_ticks
  global_energy_base_id: global_${sensor_id}_base
  global_energy_multiplicator_id: global_${sensor_id}_multiplicator
  helper_multiplicator: ${sensor_id}_multiplicator
  helper_base: ${sensor_id}_base
  helper_sensor: ${sensor_id}_raw
  helper_adc_id: ${helper_sensor}_adc
  helper_binary_id: ${helper_sensor}_binary
  homeassistant_sensor_id_last: ${sensor_energy_id}_last
  # needed substitutions:
  # name_verbose:
  # id:
  # # adc_pin:
  # binary_pin:
  # control_led_pin:

packages:
  control-led: !include /config/packages/control-led.yaml

api:
  services:
    - service: set_${sensor_energy_id}
      variables:
        value: float
      then:
        - globals.set:
            id: ${global_energy_base_id}
            value: !lambda 'return value;'
        - globals.set:
            id: ${global_ticks_id}
            value: !lambda 'return 0;'
        - light.turn_off:
            id: ${control_led_id}
        - component.update: ${sensor_ticks_id}
    - service: set_${helper_multiplicator}
      variables:
        value: float
      then:
        - globals.set:
            id: ${global_energy_multiplicator_id}
            value: !lambda 'return value;'
        - component.update: ${sensor_ticks_id}
        - component.update: ${helper_multiplicator}

globals:
  - id: ${global_ticks_id}
    type: int
    restore_value: no
    initial_value: '0'
  - id: ${global_energy_base_id}
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: ${global_energy_multiplicator_id}
    type: float
    restore_value: yes
    initial_value: '0.0133333333333333333333' # 1kWh / 75U

sensor:
  - name: ${name_verbose} Energy Total
    id: ${sensor_energy_id}_absolute
    platform: template
    state_class: total
    device_class: energy
    icon: mdi:home-lightning-bolt
    unit_of_measurement: kWh
    accuracy_decimals: 3
    lambda: return id(${sensor_energy_id}).state + id(${global_energy_base_id});
    update_interval: 60s
  - name: ${name_verbose} Energy Relative
    id: ${sensor_energy_id}
    platform: template
    state_class: total_increasing
    device_class: energy
    icon: mdi:home-lightning-bolt-outline
    unit_of_measurement: kWh
    accuracy_decimals: 3
    lambda: return id(${global_ticks_id}) * id(${global_energy_multiplicator_id});
    update_interval: 60s
    on_value:
      - component.update: ${sensor_energy_id}_absolute
  - name: ${name_verbose} Ticks
    id: ${sensor_ticks_id}
    platform: template
    state_class: total_increasing
    icon: mdi:counter
    unit_of_measurement: ''
    accuracy_decimals: 0
    entity_category: diagnostic
    lambda: return id(${global_ticks_id});
    update_interval: 60s
    on_value:
      - component.update: ${sensor_energy_id}

  - name: ${name_verbose} Multiplicator
    id: ${helper_multiplicator}
    platform: template
    icon: mdi:numeric
    unit_of_measurement: ''
    accuracy_decimals: 6
    entity_category: diagnostic
    lambda: return id(${global_energy_multiplicator_id});
    update_interval: 24h
  - name: ${name_verbose} Base kWh
    id: ${helper_base}
    platform: template
    icon: mdi:numeric
    unit_of_measurement: 'kWh'
    accuracy_decimals: 3
    entity_category: diagnostic
    lambda: return id(${global_energy_base_id});
    update_interval: 24h

  # - # get last kWh reading from homeassistant
  #   platform: homeassistant
  #   entity_id: sensor.electrical_meter_energy_last
  #   id: ${homeassistant_sensor_id_last}
  #   entity_category: diagnostic
  #   device_class: energy
  #   on_value:
  #     - logger.log:
  #         format: 'homeassistant sensor.electrical_meter_energy_last available: %.4fkWh'
  #         level: INFO
  #         args: [
  #           'id(${homeassistant_sensor_id_last}).state'
  #         ]

binary_sensor:
  - name: ${name_verbose} Tick
    id: ${helper_binary_id}
    platform: gpio
    pin: ${binary_pin}
    icon: mdi:square-wave
    # internal: true
    entity_category: diagnostic
    filters:
      - delayed_on: 100ms
    on_release:
      - globals.set:
          id: ${global_ticks_id}
          value: !lambda 'return id(${global_ticks_id}) + 1;'
      - light.toggle:
          id: ${control_led_id}
      - component.update: ${sensor_ticks_id}

# # get last value of kWh from homeassistant as new base value
# esphome:
#   on_boot:
#     - priority: 200
#       then:
#         - while:
#             condition:
#               lambda: |-
#                 return isnan(id(${homeassistant_sensor_id_last}).state);
#             then:
#               - logger.log:
#                   format: Boot - no homeassistant value found
#                   level: WARN
#               - delay: 500ms
#         - logger.log:
#             format: 'Boot - homeassistant value found: %.4fkWh'
#             level: INFO
#             args: [
#               'id(${homeassistant_sensor_id_last}).state'
#             ]
#         - globals.set:
#             id: ${global_energy_base_id}
#             value: !lambda 'return id(${homeassistant_sensor_id_last}).state;'
#         - component.update: ${helper_base}
#         - component.update: ${sensor_energy_id}
